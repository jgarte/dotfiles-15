;;; package --- init.el
;;; Commentary:
;;; Code:

(require 'package)
(package-initialize)
(defun my-package-install (package)
  "Install `PACKAGE' unless already installed."
  (unless (package-installed-p package)
    (package-install package)))

(add-to-list 'load-path "~/.emacs.d/private/evil-tmux-navigator")
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
;; From guix
;; (my-package-install 'exec-path-from-shell)
(require 'exec-path-from-shell)
;; (my-package-install 'multi-term)
(require 'multi-term)
(my-package-install 'imenu-list)
;; (require 'imenu-list)
;; From guix
;; (my-package-install 'fill-column-indicator)
(require 'fill-column-indicator)
(setq evil-want-C-u-scroll t
      evil-disable-insert-state-bindings t
      evil-want-abbrev-expand-on-insert-exit nil) ; somehow needs to happen before any mention of evil mode
;; From guix
;; (my-package-install 'evil)
(require 'evil)
;; (my-package-install 'evil-surround)
(require 'evil-surround)
;; (my-package-install 'evil-commentary)
(require 'evil-commentary)
(my-package-install 'evil-leader)
;; (require 'evil-leader)
(my-package-install 'evil-escape)
;; (require 'evil-escape)
(my-package-install 'smartparens)
;; (require 'smartparens-config)
;; (require 'navigate)
;; From guix
;; (my-package-install 'magit)
(require 'magit)
;; (my-package-install 'evil-magit)
(require 'evil-magit)
;; (my-package-install 'projectile)
(require 'projectile)
;; (my-package-install 'ibuffer-projectile)
(require 'ibuffer-projectile)
;; (my-package-install 'evil-org)
(require 'evil-org)
;; (my-package-install 'anzu)
(require 'anzu)
;; (my-package-install 'evil-anzu)
(with-eval-after-load 'evil (require 'evil-anzu))
;; (my-package-install 'ivy)
(require 'ivy)
(my-package-install 'counsel)
(require 'counsel)
(my-package-install 'swiper)
(require 'swiper)
;; From guix
;; (my-package-install 'counsel-projectile)
(require 'counsel-projectile)
;; (my-package-install 'wgrep)
(require 'wgrep)
;; (my-package-install 'which-key)
(require 'which-key)
;; (my-package-install 'avy)
(require 'avy)
(my-package-install 'osx-clipboard)
;; (require 'osx-clipboard)
;; From guix
;; (my-package-install 'xterm-color)
(require 'xterm-color)
;; (my-package-install 'flycheck)
(require 'flycheck)
;; (my-package-install 'company)
(require 'company)
;; (my-package-install 'debbugs)
(require 'debbugs)
;; (my-package-install 'restclient)
(require 'restclient)
(add-to-list 'load-path "~/.emacs.d/private/idris-mode")
(byte-compile-file "~/.emacs.d/private/idris-mode/idris-mode.el")
(byte-compile-file "~/.emacs.d/private/idris-mode/idris-ipkg-mode.el")
(byte-compile-file "~/.emacs.d/private/idris-mode/inferior-idris.el")
(require 'idris-mode)
(require 'inferior-idris)
(require 'idris-ipkg-mode)

(my-package-install 'flycheck-elm)
(require 'flycheck-elm)
(add-to-list 'load-path "~/.emacs.d/private/elm-mode")
;; From guix
;; (my-package-install 'f)
;; (my-package-install 'dash)
;; (my-package-install 's)
;; (my-package-install 'let-alist)
(require 'elm-mode)
;; From guix
;; (my-package-install 'fish-mode)
;; (require 'fish-mode)
;; (my-package-install 'nodejs-repl)
;; (require 'nodejs-repl)
(my-package-install 'proof-general)
(require 'proof-general)
(my-package-install 'company-coq)
(require 'company-coq)
;; From guix
;; (my-package-install 'haskell-mode)
(require 'haskell-interactive-mode)
(require 'haskell-process)
(my-package-install 'haskell-snippets)
(require 'haskell-snippets)
;; From guix
;; (my-package-install 'tuareg)
(require 'tuareg)
(my-package-install 'merlin)
(require 'merlin)
(let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
  (when (and opam-share (file-directory-p opam-share))
    ;; Register Merlin
    (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    (autoload 'merlin-mode "merlin" nil t nil)
    ;; Automatically start it in OCaml buffers
    (add-hook 'tuareg-mode-hook 'merlin-mode t)
    (add-hook 'caml-mode-hook 'merlin-mode t)
    ;; Use opam switch to lookup ocamlmerlin binary
    (setq merlin-command 'opam)))
(add-to-list 'load-path "~/.emacs.d/private/purescript-mode")
(require 'purescript-mode-autoloads)
(add-to-list 'Info-default-directory-list "~/.emacs.d/private/purescript-mode/")
(my-package-install 'psc-ide)
(require 'psc-ide)
;; From guix
;; (my-package-install 'geiser)
(require 'geiser)
;; (my-package-install 'slime)
(require 'slime)
;; (my-package-install 'slime-company)
(require 'slime-company)
;; (my-package-install 'rust-mode)
(require 'rust-mode)
(my-package-install 'racer)
(require 'racer)
(my-package-install 'flycheck-rust)
(require 'flycheck-rust)
(my-package-install 'sql)
(require 'sql)
;; From guix
;; (my-package-install 'graphviz-dot-mode)
(require 'graphviz-dot-mode)
;; From guix
;; (my-package-install 'yaml-mode)
(require 'yaml-mode)
(my-package-install 'dhall-mode)
(require 'dhall-mode)
;; From guix
;; (my-package-install 'markdown-mode)
(require 'markdown-mode)
;; (my-package-install 'dockerfile-mode)
(require 'dockerfile-mode)
;; (my-package-install 'docker)
(require 'docker)
;; (my-package-install 'vimrc-mode)
(require 'vimrc-mode)
;; (my-package-install 'csv-mode)
(require 'csv-mode)
;; (my-package-install 'cmake-mode)
(require 'cmake-mode)
(my-package-install 'elf-mode)
(require 'elf-mode)
;; From guix
;; (my-package-install 'web-mode)
(require 'web-mode)
;; (my-package-install 'emmet-mode)
(require 'emmet-mode)
;; (my-package-install 'ediprolog)
(require 'ediprolog)
;; (my-package-install 'solarized-theme)
(require 'solarized-theme)
(load-library (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))
(add-to-list 'load-path "/home/john/.emacs.d/private/metal-mercury-mode/")
(require 'metal-mercury-mode)
(add-to-list 'load-path "~/.emacs.d/private/company-math")
(require 'company-math)
(require 'cedille-mode)

;;; predump.el ends here
