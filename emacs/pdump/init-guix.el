;;; package --- init.el
;;; Commentary:
;;; Code:

(require 'package)

;; (add-to-list 'load-path "~/.emacs.d/private/evil-tmux-navigator")
;; (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(require 'exec-path-from-shell)
(require 'multi-term)
;; not packaged yet
;; (my-package-install 'imenu-list)
;; (require 'imenu-list)
(require 'fill-column-indicator)
(setq evil-want-C-u-scroll t
      evil-disable-insert-state-bindings t
      evil-want-abbrev-expand-on-insert-exit nil) ; somehow needs to happen before any mention of evil mode
(require 'evil)
(require 'evil-surround)
;; not packaged yet
;; (my-package-install 'evil-commentary)
;; (require 'evil-commentary)
;; (my-package-install 'evil-leader)
;; (require 'evil-leader)
;; (my-package-install 'evil-escape)
;; (require 'evil-escape)
(require 'smartparens-config)
;; (require 'navigate)
(require 'magit)
(require 'evil-magit)
(require 'projectile)
(require 'ibuffer-projectile)
(require 'evil-org)
(require 'anzu)
(with-eval-after-load 'evil (require 'evil-anzu))
(require 'ivy)
(require 'counsel)
(require 'swiper)
(require 'counsel-projectile)
(require 'wgrep)
(require 'which-key)
(require 'avy)
;; not packaged
;; (my-package-install 'osx-clipboard)
;; (require 'osx-clipboard)
(require 'xterm-color)
(require 'flycheck)
(require 'company)
(require 'debbugs)
(require 'restclient)
;; not packaged yet
;; (add-to-list 'load-path "~/.emacs.d/private/idris-mode")
;; (byte-compile-file "~/.emacs.d/private/idris-mode/idris-mode.el")
;; (byte-compile-file "~/.emacs.d/private/idris-mode/idris-ipkg-mode.el")
;; (byte-compile-file "~/.emacs.d/private/idris-mode/inferior-idris.el")
;; (require 'idris-mode)
;; (require 'inferior-idris)
;; (require 'idris-ipkg-mode)

;; not packaged yet
;; (my-package-install 'flycheck-elm)
;; (require 'flycheck-elm)
;; (add-to-list 'load-path "~/.emacs.d/private/elm-mode")
;; (require 'elm-mode)
;; (my-package-install 'proof-general)
;; (require 'proof-general)
;; (my-package-install 'company-coq)
;; (require 'company-coq)
(require 'haskell-interactive-mode)
(require 'haskell-process)
;; not packaged yet
;; (my-package-install 'haskell-snippets)
;; (require 'haskell-snippets)
(require 'tuareg)
;; not packaged yet
;; (my-package-install 'merlin)
;; (require 'merlin)
;; (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
;;   (when (and opam-share (file-directory-p opam-share))
;;     ;; Register Merlin
;;     (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
;;     (autoload 'merlin-mode "merlin" nil t nil)
;;     ;; Automatically start it in OCaml buffers
;;     (add-hook 'tuareg-mode-hook 'merlin-mode t)
;;     (add-hook 'caml-mode-hook 'merlin-mode t)
;;     ;; Use opam switch to lookup ocamlmerlin binary
;;     (setq merlin-command 'opam)))
;; (add-to-list 'load-path "~/.emacs.d/private/purescript-mode")
;; (require 'purescript-mode-autoloads)
;; (add-to-list 'Info-default-directory-list "~/.emacs.d/private/purescript-mode/")
;; (my-package-install 'psc-ide)
;; (require 'psc-ide)
(require 'geiser)
(require 'slime)
(require 'slime-company)
(require 'rust-mode)
;; not packaged yet
;; (my-package-install 'racer)
;; (require 'racer)
;; (my-package-install 'flycheck-rust)
;; (require 'flycheck-rust)
;; (my-package-install 'sql)
;; (require 'sql)
(require 'graphviz-dot-mode)
(require 'yaml-mode)
;; (my-package-install 'dhall-mode)
;; (require 'dhall-mode)
(require 'markdown-mode)
(require 'dockerfile-mode)
(require 'docker)
(require 'vimrc-mode)
(require 'csv-mode)
(require 'cmake-mode)
;; (my-package-install 'elf-mode)
;; (require 'elf-mode)
(require 'web-mode)
(require 'emmet-mode)
(require 'ediprolog)
(require 'solarized-theme)
(load-library (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))
;; (add-to-list 'load-path "/home/john/.emacs.d/private/metal-mercury-mode/")
;; (require 'metal-mercury-mode)
;; (add-to-list 'load-path "~/.emacs.d/private/company-math")
;; (require 'company-math)
(require 'cedille-mode)

;;; predump.el ends here
